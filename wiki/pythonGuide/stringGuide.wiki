= 检查字符串是否只含有数字=
str.isdigit() 只含有数字返回 True 反之则返回 False

= 转义字符串=
* 都是反斜杠\开始
| \\  | 反斜杠 |
| \n  | 换行符 |
| \r  | 回车   |
| \t  | Tab    |
| \'  | 单引号 |
| \” | 双引号 |

= 字符串索引与长度=
* 字符串索引切片含头不含尾类似于[start,stop).
    * 如果索引是从0算起，那么 stop 和 start 的差一定是字符串长度
        (stop-start) == len(s[start:stop])
* start 和 stop 省略的话 start 替换为0，stop 替换为字符串长度。

= 字符串格式化=
* format 方法 保留两位小数
    {{{#!python
    total = 1.5
    print("The total value of your change is ￥{0:0.2f}".format(total))
    }}}
    * 其中的{}是插槽，提供的值插入该位置。{<index>:<format-specifier>} 其中 index
      是索引，表示后面第几个值插入这里，冒号后面的买书部分是制定插入值的外观
      0.2f
      分别是指<宽度>.<精度><类型>，即，0宽度就是使用你需要的空间，2精度就是舍入到2位小数，类型
      f 是指始终显示为定点数，即始终显示制定的小数位即使最后一位为0。
    * 左、右、中心对齐
        * 加上显示调整字符 左对齐<，右对齐>，居中对齐^
{{{#!python
"左对齐：{0:<5}".format("左")
"右对齐：{0:>5}".format("右")
"居中对齐：{0:^5}".format("居中")
}}}
= 字符串拼接=
* 多字符串拼接
* 不要使用 for 循环，因为每次循环都会生新的序列对象
* 使用 str.join() 容易犯想当然的错误，a.join(b) 是 b1ab2ab3a，不是 ab
{{{#!python
','.join(['a','b','c'])
打印的结果是：'a,b,c'
}}}


= 字符串打印=
* print显示颜色
    * 格式：\033[显示方式;字体颜色;背景色m 要显示颜色的字符串 [\033[0m
{{{#!python
    print('后面的红字将显示为红色\033[1;35m 红\033[0m')
}}}

| 显示方式 | 效果         |
| 0        | 终端默认设置 |
| 1        | 高亮显示     |
| 4        | 使用下划线   |
| 5        | 闪烁         |
| 7        | 反白显示     |
| 8        | 不可见       |

| 字体颜色 | 背景色 | 颜色描述 |
| 30       | 40     | 黑色     |
| 31       | 41     | 红色     |
| 32       | 42     | 绿色     |
| 33       | 43     | 黄色     |
| 34       | 44     | 蓝色     |
| 35       | 45     | 紫红色   |
| 36       | 46     | 青蓝色   |
| 37       | 47     | 白色     |

* print 输出不换行
    * 如果 python是2.x版本,在语句后加一个英文的逗号 ,如果 python是3.x 版本
      print不换行参数 end=""
{{{#!python
python(x,end="")
}}}

* 多行文字打印
{{{#!python
import textwrap
width = 40
msg=(
    "人类与他们的主要敌人兽人之间的战争"
    "Offin。Foo爵士，守卫南方的勇敢骑士之一"
    "平原开始了一个漫长的旅程，通过一个未知的东方"
    "茂密的森林”在路上，他发现了一个孤立的小聚居地。"
    "累了，希望补充他的食物储备，他决定采取"
    "绕道而行。当他走近村子的时候，他看见了五个小屋。那里"
    "周围没有人可以看见。犹豫了一下，他决定进去。"
    )
print(textrap.fill(msg,width=width)) 

