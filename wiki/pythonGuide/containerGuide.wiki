= 列表=
* 列表的形式
    a = [1, 2, 5.5, 'hello']
* append() 和 extend()方法的区别
    append 方法*原地*向列表末尾添加1个新元素，列表还是原来的
    extend
    方法*原地*向列表末尾添加多个元素，列表还是原来的也可以使用+=。原列表不变
    如果使用+则会生成新的列表

* 删除列表元素 del 列表名[列表索引]

* 列表别名问题
    列表是一系列名称的集合，不是值的集合，修改任何一个名称中的元素，则其他名称中的元素也会发生改变。
    | 代码                    | 输出                    |
    | x = [3,2,1,"blast off!" |                         |
    | y = x                   |                         |
    | y[1] = "TWO"            |                         |
    | print(x)                | [3,"TWO",1,"blast off!" |



= 元组 =
* 元组的形式
    a = 1,2,3,4 # 括号只是对元组进行分组或更加可读，不需要必须有
    b = (42,) # 这也是元组，但是如果没有后面的逗号，就不是元组了。
    
* 列表转换成元组
    tuple(列表)

* 元组的可变与不可变
    元组是不可变的，但是如果元组的元素是列表，由于列表别名问题，使得元组中这个列表元素是可变的
    

= 集合=
    不含有重复元素的容器，集合是无序的
* 集合的形式
    a = {3, 4, 1, 2, "hello"}

* 集合的操作
    s = {1,2,3}
    t = {3,4,5}
    | 操作   | 含义   | 实例        |               |
    | s I t  | 并     | {1,2,3,4,5} | I是竖线       |
    | s & t  | 交     | {3}         |               |
    | s - t  | 差，   | {1,2}       | 在s中不在t 中 |
    | s ^ t  | 对称差 | {1,2,4,5}   |               |
    | s < t  | 真子集 | False       |               |
    | s <= t | 子集   | False       |               |
    | s > t  | 真超集 | False       |               |
    | s >= t | 超集   | False       |               |
    
* 集合不能含有的元素
    集合不能含有列表，但可以含有元组，只要元组中的元素没有列表即可。因为列表是可变的。
    
* 空集合
 空集合需要使用类型名和圆括号
 set()
    
= 字典 =
    字典键查找的速度非常快，几乎不会产生任何开销
    字典是无序的，可变的。
* 字典的形式
    constants = {'pi':3.14,'e':2.718}
    
    axes = dict([(1,"x"),(2,"y"),(3,"z")])
    
* 字典的 update() 方法
    该方法可以将其他字典或元组的列表合并到当前字典，并将重复的键覆盖掉
    axes.updat({1:'r',2:'phl', 3:'theta"})
    
    
* 对字典使用 in 时，测试的是字典的键，不是字典的值


