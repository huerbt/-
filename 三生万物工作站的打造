三生万物工作站的打造

推荐阅读：
1、https://www.jianshu.com/p/b4edd73c696b
2、https://blog.csdn.net/the_victory/article/details/50638810
3、https://github.com/powerline/fonts
4、https://blog.csdn.net/simple_the_best/article/details/51360778
5、https://www.kancloud.cn/kancloud/tmux/62459

6、https://blog.csdn.net/linux_hua130/article/details/51475542（vim绘图）

7、https://www.cnblogs.com/eyong/p/3588646.html(vims使用技巧)
8、https://blog.csdn.net/yhm07/article/details/41788289/ （vimwiki）
9、https://blog.csdn.net/Linuxprobe18/article/details/80965561 （vimwiki）

10、https://blog.csdn.net/a464057216/article/details/51523860（buffe、Windows、tab的使用)

11、https://www.jianshu.com/p/3066b3191cb1 （NERDTree）

12、http://yijiebuyi.com/blog/9c6419897949a7935d0fdec74cb7c61b.html （item2技巧）

13、https://www.kancloud.cn/kancloud/tmux/62462 （tmux）

14、http://www.sohu.com/a/195662958_115128 （tmux）

15、https://blog.csdn.net/ZCF1002797280/article/details/51859524 （tmux)

16、https://blog.csdn.net/qq_41145192/article/details/81479538(YCM)


17、https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000（git）

18、https://segmentfault.com/a/1190000003962806（python vim）

brew安装的python与系统python引用产生混乱。

解决方法：

# 删除brew安装的`python@2`
brew uninstall --ignore-dependencies --force python@2
# 重新安装ycmd
cd ~/.vim/bundle/YouCompleteMe 
git submodule update --recursive --init
sudo bash ./install.sh

作者：syqrefind
链接：https://www.jianshu.com/p/2d89bcbfbb0d
來源：简书else:
    def tests():
        suite = doc_suite(test_dir)
        res = unittest.TestResult()
        suite.run(res)
        for f in res.errors + res.failures:
            raise AssertionError(f[1])
        assert res.wasSuccessful()
简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。

YCM 插件的安装
1、首先安装最新版本的MacVim.
2、然后使用Vundle安装YouCompleteMe。在.vimrc_vundle 中添加 Plugin 'Valloric/YouCompleteMe'
3、安装CMake
	命令行里敲brew install cmake （假设已经安装过homebrew）
4、编译YCM, 不带C语言族补全:
cd ~/.vim/bundle/YouCompleteMe
./install.py
5、进入 vim 输入命令:PluginInstall



看了一篇文章 文本三巨头：zsh、tmux 和 vim （http://blog.jobbole.com/86571/）



说到：
“使用 zsh、vim 和 tmux 的好处就在于免费使用，速度快，可任意定制，在任何操作系统上都能使用，可在远程环境中使用，还在于可以实现远程结对编程，以及互相之间，和与 Unix 之间深度的整合。最终纯文本编辑的效率和组织性将会得到很大提升。该工具链可以完全由 git 管理，并且可以再几秒钟的时间内克隆到一台远程服务器或是一台新的机器上。总的来说，它们的这些优点让使我在写作和编程上变得更快，更有效率。”


~关于为什么使用zsh：
1、

~关于为什么使用tmux：
1、tmux和vim支持对一个特定的项目打开大量的窗格和窗口，如果你希望转换到另一个完全不同的项目，你可以从这些窗口分离出来转向另外一个项目，然后再按原样返回这些窗口。

~关于为什么使用vim：

想要给三巨头创建一个强大的工作环境，我们可以下载 iTerm2 终端模拟器。iTerm2 比普通的终端应用具有更强的性能，更多的特性和更灵活的定制化。

确保你知道iTerm2的即时回放，正则查询，点击打开URL，以及标记跳转的功能

【环境安装】

一、Mac电脑的Caps Lock键改成Control键
1、打开「System Preferences」
2、选择「Keyboard」
3、选择「Modifier Keys」
4、把Caps Lock映射为Control
5、Done

二、下载安装iTerm2 终端模拟器
1、下载官网 http://www.iterm2.cn 下载后直接安装即可
2、当iTerm2安装完成，即可添加亮调和暗调主题。在iTerm2->Preferences->Profiles->Color选择Color  我选择了Solarized Dark
3、启用系统级别的绑定键 通过该键可以让iTerm2转为最前面的窗口。该设置在Preferences > Keys中HotKey，而我使用的绑定键是Option-空格
4、在 Profiles > Terminal > Notifications中撤销选中iTerm2 的响铃声

三、安装git
1、官方维护的 OSX Git 安装程序可以在 Git 官方网站下载，网址为 https://git-scm.com/download/mac

2、Git基本配置
git config --global user.name "your_name"  
git config --global user.email "your_email@gmail.com"

3 、生成密钥并关联仓库

（1）、先查看本地是否有密钥对，有的话就不用创建了，如果是第一次安装肯定是没有的，打开终端，执行以下命令

cd ~/.ssh 
密钥生成后会存放在.ssh文件下，若此文件存在并ls后显示如下内容，说明你创建过，直接关联仓库即可，否则继续生成
id_rsa  id_rsa.pub known_hosts

（2）、通过以下命令生成密钥对

ssh-keygen -t rsa -C "your_email@youremail.com" // 这里是你自己的邮箱
创建过程中，会询问你密钥存储位置，直接enter就好，会让你设置密码，可直接enter，也可输入密码（输密码时是不显示输入进度的，直接按键盘就好了，别傻傻的等），最后显示一个矩形方框就说明创建成功了

（3）、上传密钥 
私钥就存在本地即可，公钥需要上传至远程仓库，这样才能让本地仓库和远程仓库建立连接；同步骤1，cd到.ssh文件，ls出上述三个文件，然后复制公钥id_rsa.pub内容，如下
cd ~/.ssh
ls
cat id_rsa.pub 打印出公钥
复制上述四行公钥，上传至github：登录账号、点击头像、选择Settings、选择SSH and GPG keys，然后new一个ssh key，名称随便起

（4）、建立本地仓库 
远程仓库创建好之后，复制仓库地址，然后在本地克隆一个(若你设置过密码，会要求你输入密码，输入即可)，如下

git clone git@github.com:YourCount/GitTest.git // clone后面的连接替换成你自己的

至此，本地仓库和远程仓库都已创建好并建立连接，我们可以使用git来管理代码了


4、git 的使用（https://blog.csdn.net/shaa3747/article/details/80296469）

四、ZSH
（1）、安装了iTerm2，我们先把bash切换成zsh，使用命令行如下：
chsh -s /bin/zsh

执行命令后，会让你输入电脑的密码，输入即可。完成后，需要完全退出iTerm2,再次进入时，就已经从bash切换到zsh了。当然，如果你哪一天又想用bash了，也可以使用下列命令：

chsh -s /bin/bash

（2）、安装 oh my zsh
不得不说，这个oh my zsh真的是牛逼哄哄，去看看上面的star就知道了。个人推荐使用curl自动安装，执行命令行如下：

curl -L https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh | sh

（3）、zsh配置
将下面的文本加到.zshrc文件中，让zsh支持vim:

export EDITOR="vim"
bindkey -v 
 
# vi style incremental search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey '^P' history-search-backward
bindkey '^N' history-search-forward

支持更多的智能命令。比如，如果你想在bash中移动到一个目录里，你可能会输入cd foo。而在zsh中如果你将下面一行加入到.zshrc中，你只需要输入foo即可。
setopt AUTO_CD



五、TMUX
tmux像胶水一样将文本三巨头紧密联系在一起。它允许一个用户在一个终端窗口或远程终端会话中使用多个不同的终端会话。在同一个命令行接口处理多个程序

https://www.cnblogs.com/maoxiaolv/p/5526602.html

（1）、如何安装 Tmux
在 Mac OS 中安装：

安装 Homebrew
  
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

安装 Tmux
$ brew install tmux

（2）、运行与设置
在终端中输入 tmux 就可以打开一个新的 tmux session，tmux 的所有操作必须先使用一个前缀键（默认是 ctrl + b）进入命令模式，或者说进入控制台，就像 vim 中的 esc。
通过按下 Caps-Lock 键来代替 Ctrl 键将会非常实用。因为在编码过程中，你需要频繁地按下 Ctrl 键，而由于 Caps-Lock 与手指在键盘的起始位置处于同一直线，所以按下 Caps-Lock 键会更加容易、便捷。

其次，我建议将 Tmux 的快捷键前缀变为 Ctrl - a。用 Caps-Lock 键替代了 Ctrl 键之后，由于 Caps-Lock 键与 a 键离得更近，所以按下 Ctrl - a 就将会比按下 Ctrl - b更容易、更便捷。

若要将快捷键前缀变更为 Ctrl-a ，请将以下配置加入到 Tmux 的配置文件 ~/.tmux.conf 中：

unbind C-b
set -g prefix C-a

每当开启一个新的会话时，Tmux 都会先读取 ~/.tmux.conf 这个文件。该文件中存放的就是对 Tmux 的配置。

小提示：如果你希望新的配置项能够立即生效，那么你可以将下面这一行配置加入到文件~/.tmux.conf 中。

# bind a reload key
bind R source-file ~/.tmux.conf ; display-message "Config reloaded.."
这样配置了之后，每当向 ~/.tmux.conf 文件中添加了新的配置，只需要按下 Ctrl-b r就可以重新加载配置并使新的配置生效，从而免去了开启一个新的会话。

基本操作：
窗口控制

先来看看在 tmux 之外如何进行控制

session 会话：session是一个特定的终端组合。输入tmux就可以打开一个新的session
tmux new -s session_name 创建一个叫做 session_name 的 tmux session
tmux attach -t session_name 重新开启叫做 session_name 的 tmux session
tmux switch -t session_name 转换到叫做 session_name 的 tmux session
tmux list-sessions / tmux ls 列出现有的所有 session
tmux detach 离开当前开启的 session
tmux kill-server 关闭所有 session

window 窗口：session 中可以有不同的 window（但是同时只能看到一个 window）
tmux new-window 创建一个新的 window
tmux list-windows
tmux select-window -t :0-9 根据索引转到该 window
tmux rename-window 重命名当前 window

pane 面板：window 中可以有不同的 pane（可以把 window 分成不同的部分）
tmux split-window 将 window 垂直划分为两个 pane
tmux split-window -h 将 window 水平划分为两个 pane
tmux swap-pane -[UDLR] 在指定的方向交换 pane
tmux select-pane -[UDLR] 在指定的方向选择下一个 pane
更常用的是在 tmux 中直接通过默认前缀 ctrl + b 之后输入对应命令来操作，具体如下（这里只列出输入默认前缀之后需要输入的操作）：



六、 VIM
 添加vim插件与配置
 我们在~/.vimrc中添加插件配置，在~/.vimrc_vundle中添加插件

 "~/.vimrc_vundle文件"

"  set the runtime path to include Vundle and initialize"
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required"
Plugin 'gmarik/Vundle.vim'

" Vundle List Here"


call vundle#end() 
filetype plugin indent on


" ~/.vimrc文件"
set nocompatible 
filetype off

let $CONFIG_DIR = "~/"

" vundle config"
let $VUNDLE_CONFIG = $CONFIG_DIR.".vimrc_vundle"
if filereadable(expand($VUNDLE_CONFIG))
  source $VUNDLE_CONFIG
endif

